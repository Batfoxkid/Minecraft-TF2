"VertexlitGeneric"
{
	"$basetexture" "mc_inf/spruce_leaves"
	"$surfaceprop" "grass"
	"$translucent" 1
	
	// Behold the things I do as an alterative to not having $allowdiffusemodulation or $notint in TF2
	
	"$var"		0
	"$avar"		0
	"$bvar"		0
	"$cvar"		0
	
	"$red"		0
	"$green"	0
	"$blue"		0
	
	"$color2"	"[0 0 0]"
	"$entityorigin"	"[0 0 0]"
	
	"$twofivetwofive"	255
	"$one"		1.0
	"$hotr"		174
	"$hotg"		164
	"$hotb"		42
	"$coldr"	96
	"$coldg"	161
	"$coldb"	123
	"$midr"		26
	"$midg"		191
	"$midb"		0
	"$mapfourth"	8250
	"$maphalf"	16500
	"$mapfull"	33000
	"$maptriple"	61875
	
	proxies
	{
		EntityOrigin
		{
		}
		
		// Funny vectors
		Clamp
		{
			srcVar1		"$avar"
			min		"$entityorigin[0]"
			max		"$entityorigin[0]"
			resultVar	"$avar"
		}
		Clamp
		{
			srcVar1		"$bvar"
			min		"$entityorigin[1]"
			max		"$entityorigin[1]"
			resultVar	"$bvar"
		}
		Clamp
		{
			srcVar1		"$cvar"
			min		"$entityorigin[2]"
			max		"$entityorigin[2]"
			resultVar	"$cvar"
		}
		
		// Elevation in Minecraft starts at 64 Y then increases to decrease the temperature
		Clamp
		{
			srcVar1		"$cvar"
			min		-8250
			max		16500
			resultVar	"$cvar"
		}
		
		// Set a range of 0 to 33000 and 0 to 24750
		Add
		{
			srcVar1		"$avar"
			srcVar2		"$maphalf"
			resultVar	"$avar"
		}
		Add
		{
			srcVar1		"$bvar"
			srcVar2		"$maphalf"
			resultVar	"$bvar"
		}
		Add
		{
			srcVar1		"$cvar"
			srcVar2		"$mapfourth"
			resultVar	"$cvar"
		}
		
		// Then get our 0.0 to 1.0 range
		Divide
		{
			srcVar1		"$avar"
			srcVar2		"$mapfull"
			resultVar	"$avar"
		}
		Divide
		{
			srcVar1		"$bvar"
			srcVar2		"$mapfull"
			resultVar	"$bvar"
		}
		
		// Subtract the height to our temperature
		Divide
		{
			srcVar1		"$cvar"
			srcVar2		"$maptriple"
			resultVar	"$cvar"
		}
		Subtract
		{
			srcVar1		"$avar"
			srcVar2		"$cvar"
			resultVar	"$avar"
		}
		
		// Make sure it's 0.0 to 1.0
		Clamp
		{
			srcVar1		"$avar"
			min		0.0
			max		1.0
			resultVar	"$avar"
		}
		Clamp
		{
			srcVar1		"$bvar"
			min		0.0
			max		1.0
			resultVar	"$bvar"
		}
		
		// Rainfall is multiplied by it's temperature
		Multiply
		{
			srcVar1		"$bvar"
			srcVar2		"$avar"
			resultVar	"$bvar"
		}
		
		// Fun Calc Time
		Subtract
		{
			srcVar1		"$one"
			srcVar2		"$avar"
			resultVar	"$cvar"
		}
		Subtract
		{
			srcVar1		"$avar"
			srcVar2		"$bvar"
			resultVar	"$avar"
		}
		
		// Red = 174a + 26b + 96c
		Multiply
		{
			srcVar1		"$hotr"
			srcVar2		"$avar"
			resultVar	"$red"
		}
		Multiply
		{
			srcVar1		"$midr"
			srcVar2		"$bvar"
			resultVar	"$var"
		}
		Add
		{
			srcVar1		"$red"
			srcVar2		"$var"
			resultVar	"$red"
		}
		Multiply
		{
			srcVar1		"$coldr"
			srcVar2		"$cvar"
			resultVar	"$var"
		}
		Add
		{
			srcVar1		"$red"
			srcVar2		"$var"
			resultVar	"$red"
		}
		Divide	// Setting $color2 at all gets treated as a float regardless
		{
			srcVar1		"$red"
			srcVar2		"$twofivetwofive"
			resultVar	"$color2[0]"
		}
		
		// Green = 164a + 191b + 161c
		Multiply
		{
			srcVar1		"$hotg"
			srcVar2		"$avar"
			resultVar	"$green"
		}
		Multiply
		{
			srcVar1		"$midg"
			srcVar2		"$bvar"
			resultVar	"$var"
		}
		Add
		{
			srcVar1		"$green"
			srcVar2		"$var"
			resultVar	"$green"
		}
		Multiply
		{
			srcVar1		"$coldg"
			srcVar2		"$cvar"
			resultVar	"$var"
		}
		Add
		{
			srcVar1		"$green"
			srcVar2		"$var"
			resultVar	"$green"
		}
		Divide
		{
			srcVar1		"$green"
			srcVar2		"$twofivetwofive"
			resultVar	"$color2[1]"
		}
		
		// Blue = 42a + 123c
		Multiply
		{
			srcVar1		"$hotb"
			srcVar2		"$avar"
			resultVar	"$blue"
		}
		//Multiply
		//{
		//	srcVar1		"$midb"
		//	srcVar2		"$bvar"
		//	resultVar	"$var"
		//}
		//Add
		//{
		//	srcVar1		"$blue"
		//	srcVar2		"$var"
		//	resultVar	"$blue"
		//}
		Multiply
		{
			srcVar1		"$coldb"
			srcVar2		"$cvar"
			resultVar	"$var"
		}
		Add
		{
			srcVar1		"$blue"
			srcVar2		"$var"
			resultVar	"$blue"
		}
		Divide
		{
			srcVar1		"$blue"
			srcVar2		"$twofivetwofive"
			resultVar	"$color2[2]"
		}
	}
}
